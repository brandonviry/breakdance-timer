<?php

namespace BreakdanceCustomElements;

use function Breakdance\Elements\c;
use function Breakdance\Elements\PresetSections\getPresetSection;


\Breakdance\ElementStudio\registerElementForEditing(
    "BreakdanceCustomElements\\Timer",
    \Breakdance\Util\getdirectoryPathRelativeToPluginFolder(__DIR__)
);

class Timer extends \Breakdance\Elements\Element
{
    static function uiIcon()
    {
        return 'SquareIcon';
    }

    static function tag()
    {
        return 'div';
    }

    static function tagOptions()
    {
        return [];
    }

    static function tagControlPath()
    {
        return false;
    }

    static function name()
    {
        return 'Timer';
    }

    static function className()
    {
        return 'autogenerated-bce-timer';
    }

    static function category()
    {
        return 'other';
    }

    static function badge()
    {
        return false;
    }

    static function slug()
    {
        return __CLASS__;
    }

    static function template()
    {
        return file_get_contents(__DIR__ . '/html.twig');
    }

    static function defaultCss()
    {
        return file_get_contents(__DIR__ . '/default.css');
    }

    static function defaultProperties()
    {
        return false;
    }

    static function defaultChildren()
    {
        return false;
    }

    static function cssTemplate()
    {
        $template = file_get_contents(__DIR__ . '/css.twig');
        return $template;
    }

    static function designControls()
    {
        return [c(
        "globall",
        "Globall",
        [c(
        "background_color",
        "background-color",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        false,
        [],
      ), c(
        "background_color_card",
        "background-color-card",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        false,
        [],
      ), c(
        "color_texte",
        "Color texte",
        [],
        ['type' => 'color', 'layout' => 'inline'],
        false,
        false,
        [],
      ), c(
        "font",
        "Font",
        [],
        ['type' => 'typography', 'layout' => 'vertical'],
        false,
        true,
        [],
      ), c(
        "boder_card",
        "boder card",
        [],
        ['type' => 'border_complex', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "border_raduis",
        "Border raduis",
        [],
        ['type' => 'border_radius', 'layout' => 'inline'],
        false,
        false,
        [],
      )],
        ['type' => 'section'],
        false,
        false,
        [],
      )];
    }

    static function contentControls()
    {
        return [c(
        "setting_",
        "Setting ",
        [c(
        "date",
        "Date",
        [],
        ['type' => 'date_picker', 'layout' => 'vertical'],
        false,
        false,
        [],
      ), c(
        "time",
        "Time",
        [],
        ['type' => 'time_picker', 'layout' => 'vertical'],
        false,
        false,
        [],
      )],
        ['type' => 'section', 'layout' => 'vertical'],
        false,
        false,
        [],
      )];
    }

    static function settingsControls()
    {
        return [];
    }

    static function dependencies()
    {
        return false;
    }

    static function settings()
    {
        return false;
    }

    static function addPanelRules()
    {
        return false;
    }

    static public function actions()
    {
        return [

'onPropertyChange' => [['script' => '
                // Trouver tous les timers sur la page et les recharger
                const timers = document.querySelectorAll("[id^=\'timer-\']");
                timers.forEach(function(timerEl) {
                    const timerId = timerEl.id;
                    const functionName = "reloadTimer_" + timerId.replace("-", "_");
                    if (window[functionName]) {
                        console.log("Rechargement du timer:", timerId);
                        window[functionName]();
                    }
                });
            ','dependencies' => ['content.setting_.date','content.setting_.time'],'runForAllChildren' => true,
],],];
    }

    static function nestingRule()
    {
        return ["type" => "final",   ];
    }

    static function spacingBars()
    {
        return false;
    }

    static function attributes()
    {
        return false;
    }

    static function experimental()
    {
        return false;
    }

    static function order()
    {
        return 0;
    }

    static function dynamicPropertyPaths()
    {
        return [];
    }

    static function additionalClasses()
    {
        return false;
    }

    static function projectManagement()
    {
        return false;
    }

    static function propertyPathsToWhitelistInFlatProps()
    {
        return false;
    }

    static function propertyPathsToSsrElementWhenValueChanges()
    {
        return false;
    }
}
